<!DOCTYPE html>
<html lang="fr" class="scroll-smooth">
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Welcome!{% endblock %}</title>
        {% block stylesheets %}
        <link rel="stylesheet" href="{{ asset('build/app.css') }}">
        {% endblock %}

        {% block javascripts %}
            {% block importmap %}{{ importmap('app') }}{% endblock %}
            
            <script>
                // Fonction pour ouvrir le modal de d√©tails d'un voyage
                function openRideDetailsModal(rideId) {
                    // Stocker l'ID du voyage actuel
                    window.currentRideId = rideId;
                    
                    // Afficher le modal de chargement
                    document.getElementById('rideDetailsModal').classList.remove('hidden');
                    document.getElementById('rideDetailsContent').innerHTML = `
                        <div class="flex items-center justify-center p-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-accent"></div>
                        </div>
                    `;

                    // R√©cup√©rer les d√©tails du voyage
                    fetch(`/ride/${rideId}/details`)
                        .then(response => response.json())
                        .then(data => {
                            displayRideDetails(data);
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            document.getElementById('rideDetailsContent').innerHTML = `
                                <div class="text-center p-8">
                                    <p class="text-red-400">Erreur lors du chargement des d√©tails</p>
                                </div>
                            `;
                        });
                }

                // Fonction pour afficher les d√©tails du voyage
                function displayRideDetails(ride) {
                    const content = document.getElementById('rideDetailsContent');
                    
                    // G√©n√©rer la liste des participants
                    const participantsList = ride.participants.map(participant => {
                        const statusBadge = participant.status === 'annulee' ? 
                            '<span class="text-red-400 text-xs px-2 py-1 rounded-full bg-red-500/10 border border-red-400/30 ml-2">Annul√©</span>' : '';
                        
                        const seatsText = participant.seatsCount > 1 ? 
                            `<span class="text-xs text-textSecondary ml-2">${participant.seatsCount} places</span>` : 
                            `<span class="text-xs text-textSecondary ml-2">1 place</span>`;
                        
                        return `
                            <div class="flex items-center gap-3 p-2 bg-white/10 rounded-lg">
                                <div class="w-8 h-8 rounded-full bg-accent/20 flex items-center justify-center">
                                    ${participant.avatar ? 
                                        `<img src="${participant.avatar}" alt="${participant.pseudo}" class="w-8 h-8 rounded-full object-cover">` :
                                        `<svg class="w-5 h-5 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                        </svg>`
                                    }
                                </div>
                                <div class="flex-1">
                                    <p class="text-sm font-base text-textPrimary">${participant.pseudo}</p>
                                </div>
                                ${seatsText}
                                ${statusBadge}
                            </div>
                        `;
                    }).join('');

                    content.innerHTML = `
                        <div class="max-h-[80vh] overflow-y-auto">
                            <!-- En-t√™te du voyage -->
                            <div class="text-center mb-6">
                                <h3 class="text-subtitle font-title text-backgroundDark mb-2">D√©tails du voyage</h3>
                                <div class="flex items-center justify-center gap-2 mb-2">
                                    <span class="text-lg font-base text-background">${ride.departure}</span>
                                    <svg class="w-5 h-5 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                                    </svg>
                                    <span class="text-lg font-base text-background">${ride.arrival}</span>
                                </div>
                                <p class="text-background">${ride.date} √† ${ride.departureTime}</p>
                                ${ride.isEcological ? '<span class="inline-block bg-green-500/20 text-textSecondary text-xs px-2 py-1 rounded-full font-base border border-green-400/30 mt-2">üå± √âCO</span>' : ''}
                            </div>

                            <!-- Informations du conducteur -->
                            <div class="bg-white/10 rounded-xl p-4 mb-4">
                                <h4 class="text-body font-base text-backgroundDark mb-3">Conducteur</h4>
                                <div class="flex items-start gap-4">
                                    <div class="w-16 h-16 rounded-full bg-accent/20 flex items-center justify-center flex-shrink-0">
                                        ${ride.driver.avatar ? 
                                            `<img src="${ride.driver.avatar}" alt="${ride.driver.pseudo}" class="w-16 h-16 rounded-full object-cover">` :
                                            `<svg class="w-8 h-8 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                            </svg>`
                                        }
                                    </div>
                                    <div class="flex-1">
                                        <div class="flex items-center gap-2 mb-1">
                                            <h5 class="text-body font-base text-backgroundDark">${ride.driver.pseudo}</h5>
                                        </div>
                                        <div class="flex items-center gap-2 mb-2">
                                            <span class="text-sm font-base text-background">${ride.driver.averageRating}/5</span>
                                            <button onclick="openReviewsModal(${ride.driver.id})" class="text-xs text-accent hover:text-accentDark transition-colors duration-300">
                                                (${ride.driver.totalReviews} avis)
                                            </button>
                                        </div>
                                        ${ride.driver.bio ? `<p class="text-sm text-background">${ride.driver.bio}</p>` : '<p class="text-sm text-textSecondary">Aucune bio disponible</p>'}
                                    </div>
                                </div>
                            </div>

                            <!-- Informations du v√©hicule -->
                            <div class="bg-white/10 rounded-xl p-4 mb-4">
                                <h4 class="text-body font-base text-backgroundDark mb-3">V√©hicule</h4>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <p class="text-sm text-textSecondary">Mod√®le</p>
                                        <p class="text-sm font-base text-background">${ride.vehicle.brand} ${ride.vehicle.model}</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-textSecondary">Couleur</p>
                                        <p class="text-sm font-base text-background">${ride.vehicle.color}</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-textSecondary">√ânergie</p>
                                        <p class="text-sm font-base text-background">${ride.vehicle.energy}</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-textSecondary">Places</p>
                                        <p class="text-sm font-base text-background">${ride.vehicle.seats} places</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Informations du voyage -->
                            <div class="bg-white/10 rounded-xl p-4 mb-4">
                                <h4 class="text-body font-base text-backgroundDark mb-3">Informations du voyage</h4>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <p class="text-sm text-textSecondary">Prix</p>
                                        <p class="text-sm font-base text-background">${ride.price} cr√©dits</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-textSecondary">Places disponibles</p>
                                        <p class="text-sm font-base text-background">${ride.availableSeats} places</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-textSecondary">D√©part</p>
                                        <p class="text-sm font-base text-background">${ride.departureTime}</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-textSecondary">Arriv√©e estim√©e</p>
                                        <p class="text-sm font-base text-background">${ride.arrivalTime}</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Liste des participants -->
                            <div class="bg-white/10 rounded-xl p-4">
                                <h4 class="text-body font-base text-backgroundDark mb-3">Participants (${ride.participantsCount})</h4>
                                ${ride.participantsCount > 0 ? 
                                    `<div class="space-y-2">${participantsList}</div>` :
                                    '<p class="text-sm text-textSecondary">Aucun participant pour le moment</p>'
                                }
                            </div>
                        </div>
                    `;
                }



                // Fonction pour fermer le modal
                function closeRideDetailsModal() {
                    document.getElementById('rideDetailsModal').classList.add('hidden');
                }

                // Fonction pour ouvrir le modal des avis
                function openReviewsModal(userId) {
                    console.log('Ouverture des avis pour l\'utilisateur:', userId);
                    
                    // Afficher le modal de chargement
                    document.getElementById('rideDetailsContent').innerHTML = `
                        <div class="flex items-center justify-center p-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-accent"></div>
                        </div>
                    `;

                    // R√©cup√©rer les avis de l'utilisateur
                    fetch(`/user/${userId}/reviews`)
                        .then(response => {
                            console.log('Response status:', response.status);
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Donn√©es re√ßues:', data);
                            displayUserReviews(data, userId);
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            document.getElementById('rideDetailsContent').innerHTML = `
                                <div class="text-center p-8">
                                    <p class="text-red-400">Erreur lors du chargement des avis: ${error.message}</p>
                                </div>
                            `;
                        });
                }

                // Fonction pour afficher les avis d'un utilisateur
                function displayUserReviews(data, userId) {
                    console.log('Affichage des avis:', data);
                    const content = document.getElementById('rideDetailsContent');
                    
                    // V√©rifier que les donn√©es sont valides
                    if (!data || !data.user) {
                        content.innerHTML = `
                            <div class="text-center p-8">
                                <p class="text-red-400">Donn√©es invalides re√ßues</p>
                            </div>
                        `;
                        return;
                    }
                    
                    if (data.reviews && data.reviews.length > 0) {
                        const reviewsList = data.reviews.map(review => `
                            <div class="bg-white/10 rounded-xl p-4 mb-3">
                                <div class="flex items-start justify-between mb-2">
                                    <div class="flex items-center gap-2">
                                        <div class="flex items-center">
                                            ${Array.from({length: 5}, (_, i) => `
                                                <svg class="w-4 h-4 ${i < review.rating ? 'text-yellow-400' : 'text-gray-400'}" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                </svg>
                                            `).join('')}
                                        </div>
                                        <span class="text-sm font-base text-background">${review.rating}/5</span>
                                    </div>
                                    <span class="text-xs text-textSecondary">${review.createdAt}</span>
                                </div>
                                ${review.comment ? `<p class="text-sm text-background">${review.comment}</p>` : ''}
                                <div class="mt-2 text-xs text-textSecondary">
                                    Par ${review.author.pseudo} - ${review.rideInfo}
                                </div>
                            </div>
                        `).join('');

                        content.innerHTML = `
                            <div class="max-h-[80vh] overflow-y-auto">
                                <div class="flex items-center justify-between mb-6">
                                    <h3 class="text-subtitle font-title text-backgroundDark">Avis re√ßus</h3>
                                    <button onclick="backToRideDetails()" class="inline-flex items-center text-accent hover:text-accentDark font-base transition-colors duration-300">
                                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                        </svg>
                                        Pr√©c√©dent
                                    </button>
                                </div>
                                <div class="bg-white/10 rounded-xl p-4 mb-4">
                                    <div class="flex items-center gap-3 mb-3">
                                        ${data.user.avatar ? 
                                            `<img src="/uploads/avatars/${data.user.avatar}" alt="Avatar" class="w-12 h-12 rounded-full object-cover">` :
                                            `<div class="w-12 h-12 bg-accent/20 rounded-full flex items-center justify-center">
                                                <svg class="w-6 h-6 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                                </svg>
                                            </div>`
                                        }
                                        <div>
                                            <h4 class="text-body font-base text-backgroundDark">${data.user.pseudo}</h4>
                                            <div class="flex items-center gap-2">
                                                <span class="text-sm font-base text-background">${data.user.averageRating}/5</span>
                                                <span class="text-xs text-textSecondary">(${data.reviews.length} avis)</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="space-y-3">
                                    ${reviewsList}
                                </div>
                            </div>
                        `;
                    } else {
                        content.innerHTML = `
                            <div class="max-h-[80vh] overflow-y-auto">
                                <div class="flex items-center justify-between mb-6">
                                    <h3 class="text-subtitle font-title text-backgroundDark">Avis re√ßus</h3>
                                    <button onclick="backToRideDetails()" class="inline-flex items-center text-accent hover:text-accentDark font-base transition-colors duration-300">
                                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                        </svg>
                                        Pr√©c√©dent
                                    </button>
                                </div>
                                <div class="text-center p-8">
                                    <p class="text-textSecondary">Aucun avis disponible pour cet utilisateur</p>
                                </div>
                            </div>
                        `;
                    }
                }

                // Fonction pour revenir aux d√©tails du voyage
                function backToRideDetails() {
                    // Recharger les d√©tails du voyage actuel
                    if (window.currentRideId) {
                        openRideDetailsModal(window.currentRideId);
                    }
                }

                // Fermer le modal en cliquant en dehors
                document.addEventListener('DOMContentLoaded', function() {
                    const modal = document.getElementById('rideDetailsModal');
                    if (modal) {
                        modal.addEventListener('click', function(e) {
                            if (e.target === this) {
                                closeRideDetailsModal();
                            }
                        });
                    }
                });

                // Fonction pour afficher une notification en pop-up
                function showNotification(message, type = 'info') {
                    const container = document.getElementById('notificationContainer');
                    const notification = document.createElement('div');
                    
                    // Classes selon le type
                    let bgClass, textClass, iconClass, iconPath;
                    switch(type) {
                        case 'success':
                            bgClass = 'bg-green-500/20 border-green-400/30';
                            textClass = 'text-green-300';
                            iconClass = 'text-green-400';
                            iconPath = 'M5 13l4 4L19 7';
                            break;
                        case 'error':
                            bgClass = 'bg-red-500/20 border-red-400/30';
                            textClass = 'text-red-300';
                            iconClass = 'text-red-400';
                            iconPath = 'M6 18L18 6M6 6l12 12';
                            break;
                        case 'warning':
                            bgClass = 'bg-orange-500/20 border-orange-400/30';
                            textClass = 'text-orange-300';
                            iconClass = 'text-orange-400';
                            iconPath = 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z';
                            break;
                        default:
                            bgClass = 'bg-accent/20 border-accent/30';
                            textClass = 'text-accent';
                            iconClass = 'text-accent';
                            iconPath = 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';
                    }
                    
                    notification.className = `${bgClass} border rounded-lg p-4 backdrop-blur-sm max-w-sm transform transition-all duration-300 translate-x-full`;
                    notification.innerHTML = `
                        <div class="flex items-center gap-3">
                            <svg class="w-5 h-5 ${iconClass} flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${iconPath}"/>
                            </svg>
                            <span class="${textClass} text-sm">${message}</span>
                            <button onclick="this.parentElement.parentElement.remove()" class="ml-auto text-gray-400 hover:text-gray-300">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>
                    `;
                    
                    container.appendChild(notification);
                    
                    // Animation d'entr√©e
                    setTimeout(() => {
                        notification.classList.remove('translate-x-full');
                    }, 100);
                    
                    // Auto-suppression apr√®s 5 secondes
                    setTimeout(() => {
                        if (notification.parentElement) {
                            notification.classList.add('translate-x-full');
                            setTimeout(() => {
                                if (notification.parentElement) {
                                    notification.remove();
                                }
                            }, 300);
                        }
                    }, 5000);
                }

                // Fonction globale pour afficher les notifications
                window.showNotification = showNotification;
            </script>
        {% endblock %}
    </head>
    <body class="flex flex-col min-h-screen bg-background text-textPrimary font-[Quicksand]">

        {% include 'partials/_header.html.twig' %}
        {% include 'partials/_success_popup.html.twig' %}

        <main class="flex-grow {% if app.request.get('_route') not in ['homepage', 'app_login', 'app_rides', 'app_register','credit','user_base','app_construction', 'app_vehicles', 'profile','app_rides_user','admin_dashboard', 'admin_create_employe', 'admin_users', 'employe_dashboard', 'employe_all_rides', 'employe_all_reviews'] %}pt-20{% endif %}">
            {% block body %}{% endblock %}
        </main>

        {% include 'partials/_footer.html.twig' %}
        {% include 'partials/_contact_drawer.html.twig' %}
        <script src="{{ asset('build/flowbite.min.js') }}"></script>

    <!-- Modal de d√©tails des voyages -->
    <div id="rideDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6 max-w-2xl w-full max-h-[90vh] transform transition-all">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-subtitle font-title text-backgroundDark">D√©tails du voyage</h3>
                <button onclick="closeRideDetailsModal()" class="text-backgroundDark hover:text-background transition-colors duration-300">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div id="rideDetailsContent">
                <!-- Le contenu sera charg√© dynamiquement -->
            </div>
        </div>
    </div>

    <!-- Syst√®me de notifications en pop-up -->
    <div id="notificationContainer" class="fixed top-4 right-4 z-[80] space-y-2">
        <!-- Les notifications appara√Ætront ici -->
    </div>

    {% include 'partials/_review_modal.html.twig' %}

</body>
</html>