{% extends 'user/base.html.twig' %}

{% block user_content %}
    <!-- En-t√™te de bienvenue -->
    <div class="bg-gradient-to-r from-accent/20 to-accent/10 backdrop-blur-sm rounded-2xl p-6 mb-8 border border-white/20">
        <h1 class="text-title font-title text-textPrimary mb-2">Mes v√©hicules</h1>
        <p class="text-lg text-textSecondary">G√©rez vos v√©hicules pour proposer des trajets</p>
    </div>

    {% if vehicles is empty %}
        <!-- √âtat vide -->
        <div class="bg-gradient-to-br from-secondary/20 to-background/50 backdrop-blur-sm rounded-2xl p-12 border border-white/20 text-center">
            <div class="max-w-md mx-auto">
                <h2 class="text-subtitle font-title text-textPrimary mb-4">Aucun v√©hicule enregistr√©</h2>
                <p class="text-textSecondary mb-6">
                    Ajoutez votre premier v√©hicule pour commencer √† proposer des trajets en tant que conducteur.
                </p>
                <button onclick="openAddVehicleModal()" class="inline-flex items-center bg-accent text-textSecondary hover:text-textPrimary font-base px-6 py-3 rounded-lg hover:bg-accentDark transition-all duration-300 shadow-lg hover:shadow-xl">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                    Ajouter mon premier v√©hicule
                </button>
            </div>
        </div>
    {% else %}
        <!-- Bouton d'ajout quand il y a d√©j√† des v√©hicules -->
        <div class="mb-6">
            <button onclick="openAddVehicleModal()" class="inline-flex items-center bg-accent text-textSecondary hover:text-textPrimary font-base px-6 py-3 rounded-lg hover:bg-accentDark transition-all duration-300 shadow-lg hover:shadow-xl">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                </svg>
                Ajouter un v√©hicule
            </button>
        </div>

        <!-- Liste des v√©hicules -->
        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
            {% for vehicle in vehicles %}
                <div class="bg-gradient-to-br from-accent/20 to-accent/10 backdrop-blur-sm rounded-2xl p-6 border border-accent/30 hover:border-accent/50 transition-all duration-300">
                    <div class="flex items-start justify-between mb-4">
                        <div class="flex items-center gap-3">
                            <div>
                                <div class="flex items-center gap-2">
                                    <h3 class="text-subtitle font-title text-textPrimary">{{ vehicle.brand }} {{ vehicle.model }}</h3>
                                    {% if vehicle.energy == '√âlectrique' or vehicle.energy == 'Hybride' %}
                                    <span class="bg-green-500/20 text-textSecondary text-xs px-2 py-1 rounded-full font-base border border-green-400/30">
                                        üå± √âCO
                                    </span>
                                    {% endif %}
                                </div>
                                <p class="text-body text-textSecondary">{{ vehicle.plate }}</p>
                            </div>
                        </div>
                        <button onclick="confirmDeleteVehicle({{ vehicle.id }}, '{{ vehicle.brand }} {{ vehicle.model }}')" class="text-red-400 hover:text-red-300 transition-colors duration-300 p-2 rounded-lg hover:bg-red-500/10">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                            </svg>
                        </button>
                    </div>
                    
                                            <div class="space-y-3">
                        <div class="flex items-center justify-between">
                            <span class="text-body text-textSecondary">√ânergie</span>
                            <span class="text-body font-base text-textPrimary">{{ vehicle.energy }}</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-body text-textSecondary">Couleur</span>
                            <span class="text-body font-base text-textPrimary">{{ vehicle.color }}</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-body text-textSecondary">Places</span>
                            <span class="text-body font-base text-textPrimary">{{ vehicle.seats }} places</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-body text-textSecondary">Date d'immatriculation</span>
                            <span class="text-body font-base text-textPrimary">{{ vehicle.registrationDate|date('m/Y') }}</span>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% endif %}
{% endblock %}

{% block vehicle_modals %}
    <!-- Modal d'ajout de v√©hicule -->
    <div id="addVehicleModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[60] flex items-center justify-center p-4">
        <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto overflow-x-auto transform transition-all">
            <div class="text-center mb-6">
                <h3 class="text-subtitle font-title text-backgroundDark mb-2">Ajouter un v√©hicule</h3>
                <p class="text-background">Remplissez les informations de votre v√©hicule</p>
            </div>
            
            {{ form_start(form, {'attr': {'id': 'addVehicleForm', 'class': 'space-y-6'}}) }}
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        {{ form_label(form.brand, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.brand, {'attr': {'class': 'w-full px-3 py-2 bg-white/20 border border-white/30 rounded-lg text-backgroundDark placeholder-backgroundDark/60 focus:outline-none focus:border-accent backdrop-blur-sm'}}) }}
                        {{ form_errors(form.brand) }}
                    </div>
                    
                    <div>
                        {{ form_label(form.model, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.model, {'attr': {'class': 'w-full px-3 py-2 bg-white/20 border border-white/30 rounded-lg text-backgroundDark placeholder-backgroundDark/60 focus:outline-none focus:border-accent backdrop-blur-sm'}}) }}
                        {{ form_errors(form.model) }}
                    </div>

                    <div>
                        {{ form_label(form.plate, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.plate, {'attr': {'class': 'w-full px-3 py-2 bg-white/20 border border-white/30 rounded-lg text-backgroundDark placeholder-backgroundDark/60 focus:outline-none focus:border-accent backdrop-blur-sm text-sm break-words uppercase', 'maxlength': '9', 'placeholder': 'AB-123-CD'}}) }}
                        {{ form_errors(form.plate) }}
                        <p class="text-xs text-background/80 mt-1">Format : AB-123-CD</p>
                    </div>
                    
                    <div class="relative">
                        {{ form_label(form.registrationDate, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        <div class="relative">
                            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                                <svg class="w-4 h-4 text-backgroundDark/60" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                                </svg>
                            </div>
                            {{ form_widget(form.registrationDate, {
                                'attr': {
                                    'class': 'w-full px-4 py-2 ps-10 font-body text-secondary rounded-lg bg-white/20 text-backgroundDark placeholder-backgroundDark/60 border-white/30 focus:border-accent cursor-pointer backdrop-blur-sm',
                                    'readonly': true,
                                    'placeholder': 'S√©lectionner une date'
                                }
                            }) }}
                        </div>
                        {{ form_errors(form.registrationDate) }}
                    </div>

                    <div>
                        {{ form_label(form.energy, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.energy, {'attr': {'class': 'w-full px-3 py-2 bg-white/20 border border-white/30 rounded-lg text-backgroundDark focus:outline-none focus:border-accent backdrop-blur-sm'}}) }}
                        {{ form_errors(form.energy) }}
                    </div>

                    <div>
                        {{ form_label(form.color, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.color, {'attr': {'class': 'w-full px-3 py-2 bg-white/20 border border-white/30 rounded-lg text-backgroundDark focus:outline-none focus:border-accent backdrop-blur-sm'}}) }}
                        {{ form_errors(form.color) }}
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-1 gap-6">
                    <div>
                        {{ form_label(form.seats, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.seats, {'attr': {'class': 'w-full px-3 py-2 bg-white/20 border border-white/30 rounded-lg text-backgroundDark focus:outline-none focus:border-accent backdrop-blur-sm'}}) }}
                        {{ form_errors(form.seats) }}
                        <p class="text-xs text-background/80 mt-1">Nombre de places total (conducteur inclus)</p>
                    </div>
                </div>

                {% if vehicles is empty %}
                <!-- Info sur l'utilisation -->
                <div class="bg-accent bg-opacity-20 border border-accent border-opacity-40 rounded-lg p-4">
                    <div class="flex items-start gap-3">
                        <svg class="w-5 h-5 text-backgroundDark mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        <div>
                            <h4 class="font-base text-backgroundDark mb-1">√Ä savoir</h4>
                            <p class="text-body text-background">
                                Une fois votre v√©hicule enregistr√©, vous pourrez proposer des trajets en tant que conducteur. 
                                Assurez-vous que les informations sont exactes.
                            </p>
                        </div>
                    </div>
                </div>
                {% endif %}
                

            {{ form_end(form) }}
        </div>
    </div>

    <!-- Modal de confirmation de suppression -->
    <div id="deleteVehicleModal" class="fixed inset-0 bg-black bg-opacity-50 z-[60] hidden flex items-center justify-center">
        <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-8 max-w-md mx-4 transform transition-all">
            <div class="text-center">
                <h3 class="text-subtitle font-title text-backgroundDark mb-2">Supprimer le v√©hicule</h3>
                <p class="text-background mb-6" id="deleteVehicleText">
                    √ätes-vous s√ªr de vouloir supprimer ce v√©hicule ?
                </p>
                <div class="flex gap-4 justify-end">
                    <button id="confirmDeleteVehicleBtn" class="bg-accent hover:bg-accentDark backdrop-blur-sm hover:backdrop-blur-md text-textSecondary hover:text-textPrimary font-base py-3 px-6 rounded-xl transition-all duration-300">
                        Oui, supprimer
                    </button>
                    <button id="cancelDeleteVehicleBtn" class="backdrop-blur-sm bg-background/40 border border-background/30 text-textPrimary font-base py-3 px-6 rounded-xl hover:bg-background/60 transition-all duration-300">
                        Annuler
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let vehicleToDelete = null;

        function openAddVehicleModal() {
            document.getElementById('addVehicleModal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        function closeAddVehicleModal() {
            document.getElementById('addVehicleModal').classList.add('hidden');
            document.body.style.overflow = 'auto';
        }

        function confirmDeleteVehicle(vehicleId, vehicleName) {
            vehicleToDelete = vehicleId;
            document.getElementById('deleteVehicleText').textContent = 
                `√ätes-vous s√ªr de vouloir supprimer le v√©hicule "${vehicleName}" ?`;
            document.getElementById('deleteVehicleModal').classList.remove('hidden');
        }

        document.getElementById('confirmDeleteVehicleBtn').addEventListener('click', function() {
            if (vehicleToDelete) {
                window.location.href = `{{ path('app_vehicles_delete', {'id': '__ID__'}) }}`.replace('__ID__', vehicleToDelete);
            }
        });

        document.getElementById('cancelDeleteVehicleBtn').addEventListener('click', function() {
            document.getElementById('deleteVehicleModal').classList.add('hidden');
            vehicleToDelete = null;
        });

        // Fermer les modals en cliquant en dehors
        document.getElementById('addVehicleModal').addEventListener('click', function(event) {
            if (event.target === this) {
                closeAddVehicleModal();
            }
        });

        document.getElementById('deleteVehicleModal').addEventListener('click', function(event) {
            if (event.target === this) {
                document.getElementById('deleteVehicleModal').classList.add('hidden');
                vehicleToDelete = null;
            }
        });

        // Calendrier personnalis√© pour le formulaire de v√©hicule
        class VehicleDatePicker {
            constructor(inputId, pickerId, daysId, monthId, prevBtnId, nextBtnId) {
                this.input = document.getElementById(inputId);
                this.picker = document.getElementById(pickerId);
                this.daysContainer = document.getElementById(daysId);
                this.monthDisplay = document.getElementById(monthId);
                this.prevBtn = document.getElementById(prevBtnId);
                this.nextBtn = document.getElementById(nextBtnId);
                
                this.currentDate = new Date();
                this.selectedDate = new Date();
                
                this.init();
            }
            
            init() {
                this.renderCalendar();
                this.bindEvents();
            }
            
            renderCalendar() {
                const year = this.currentDate.getFullYear();
                const month = this.currentDate.getMonth();
                
                // Afficher le mois et l'ann√©e
                const monthNames = ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'];
                this.monthDisplay.textContent = `${monthNames[month]} ${year}`;
                
                // Obtenir le premier jour du mois et le nombre de jours
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay() + (firstDay.getDay() === 0 ? -6 : 1));
                
                this.daysContainer.innerHTML = '';
                
                // G√©n√©rer les jours
                for (let i = 0; i < 42; i++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    
                    const dayElement = document.createElement('div');
                    dayElement.className = 'text-center p-2 cursor-pointer hover:bg-accent/20 rounded';
                    
                    // V√©rifier si c'est le mois actuel
                    if (date.getMonth() === month) {
                        dayElement.classList.add('text-textPrimary');
                        
                        const today = new Date();
                        const isToday = date.toDateString() === today.toDateString();
                        const isSelected = date.toDateString() === this.selectedDate.toDateString();
                        
                        // Logique de coloration prioritaire
                        if (isSelected) {
                            // Date s√©lectionn√©e (priorit√© la plus haute)
                            dayElement.classList.add('bg-accent', 'text-textSecondary');
                        } else if (isToday) {
                            // Aujourd'hui mais non s√©lectionn√©
                            dayElement.style.backgroundColor = '#FFE0B2';
                            dayElement.style.color = '#3E2723';
                        }
                        
                        // Pour la date d'immatriculation, permettre les dates pass√©es
                        dayElement.addEventListener('click', () => this.selectDate(date));
                    } else {
                        dayElement.classList.add('text-tSecondaryLight');
                    }
                    
                    dayElement.textContent = date.getDate();
                    this.daysContainer.appendChild(dayElement);
                }
            }
            
            selectDate(date) {
                this.selectedDate = date;
                // Utiliser le format local pour √©viter les probl√®mes de fuseau horaire
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                this.input.value = `${year}-${month}-${day}`;
                
                this.hidePicker();
                this.renderCalendar();
            }
            
            bindEvents() {
                this.input.addEventListener('click', () => this.togglePicker());
                
                this.prevBtn.addEventListener('click', () => {
                    this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                    this.renderCalendar();
                });
                
                this.nextBtn.addEventListener('click', () => {
                    this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                    this.renderCalendar();
                });
                
                // Fermer le calendrier en cliquant √† l'ext√©rieur
                document.addEventListener('click', (e) => {
                    if (!this.picker.contains(e.target) && !this.input.contains(e.target)) {
                        this.hidePicker();
                    }
                });
            }
            
            togglePicker() {
                if (this.picker.classList.contains('hidden')) {
                    this.showPicker();
                } else {
                    this.hidePicker();
                }
            }
            
            showPicker() {
                this.picker.classList.remove('hidden');
                
                // Positionner le calendrier par rapport au champ de date
                const inputRect = this.input.getBoundingClientRect();
                this.picker.style.position = 'fixed';
                this.picker.style.top = (inputRect.bottom + 4) + 'px';
                this.picker.style.left = inputRect.left + 'px';
                this.picker.style.width = inputRect.width + 'px';
                
                // V√©rifier si le calendrier d√©borde en bas
                setTimeout(() => {
                    const pickerRect = this.picker.getBoundingClientRect();
                    const viewportHeight = window.innerHeight;
                    
                    if (pickerRect.bottom > viewportHeight) {
                        // Le calendrier d√©borde, le positionner au-dessus du champ
                        this.picker.style.top = (inputRect.top - this.picker.offsetHeight - 4) + 'px';
                    }
                }, 10);
            }
            
            hidePicker() {
                this.picker.classList.add('hidden');
                
                // R√©initialiser la position
                this.picker.style.position = '';
                this.picker.style.top = '';
                this.picker.style.left = '';
                this.picker.style.width = '';
            }
        }

        // Initialiser le calendrier du formulaire de v√©hicule
        document.addEventListener('DOMContentLoaded', function() {
            new VehicleDatePicker('{{ form.registrationDate.vars.id }}', 'vehicle-date-picker', 'vehicle-calendar-days', 'vehicle-current-month', 'vehicle-prev-month', 'vehicle-next-month');
            
            // Auto-formatage de la plaque d'immatriculation
            const plateInput = document.querySelector('input[name="vehicle[plate]"]');
            if (plateInput) {
                plateInput.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/[^A-Za-z0-9]/g, '').toUpperCase();
                    
                    // Limiter √† 7 caract√®res (2 lettres + 3 chiffres + 2 lettres)
                    if (value.length > 7) {
                        value = value.substring(0, 7);
                    }
                    
                    // Formater avec les tirets
                    if (value.length >= 2) {
                        value = value.substring(0, 2) + '-' + value.substring(2);
                    }
                    if (value.length >= 6) {
                        value = value.substring(0, 6) + '-' + value.substring(6);
                    }
                    
                    e.target.value = value;
                });
                
                // Emp√™cher la saisie de caract√®res non autoris√©s
                plateInput.addEventListener('keypress', function(e) {
                    const char = String.fromCharCode(e.which);
                    if (!/[A-Za-z0-9]/.test(char)) {
                        e.preventDefault();
                    }
                });
            }
        });
    </script>
    
    <!-- Calendrier personnalis√© pour le formulaire de v√©hicule -->
    <div id="vehicle-date-picker" class="absolute bg-backgroundDark border border-accentDark rounded-lg mt-1 p-4 z-[100] hidden shadow-xl" style="max-height: 400px; overflow-y: auto;">
        <div class="flex items-center justify-between mb-4">
            <button type="button" id="vehicle-prev-month" class="text-tSecondaryLight hover:text-textPrimary">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
            </button>
            <h3 id="vehicle-current-month" class="text-textPrimary font-base"></h3>
            <button type="button" id="vehicle-next-month" class="text-tSecondaryLight hover:text-textPrimary">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
            </button>
        </div>
        <div class="grid grid-cols-7 gap-1 mb-2" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 0.25rem;">
            <div class="text-center text-xs text-tSecondaryLight">Lun</div>
            <div class="text-center text-xs text-tSecondaryLight">Mar</div>
            <div class="text-center text-xs text-tSecondaryLight">Mer</div>
            <div class="text-center text-xs text-tSecondaryLight">Jeu</div>
            <div class="text-center text-xs text-tSecondaryLight">Ven</div>
            <div class="text-center text-xs text-tSecondaryLight">Sam</div>
            <div class="text-center text-xs text-tSecondaryLight">Dim</div>
        </div>
        <div id="vehicle-calendar-days" class="gap-1" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 0.25rem;"></div>
    </div>
{% endblock %} 