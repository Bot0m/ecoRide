{% extends 'user/base.html.twig' %}

{% block user_content %}
    <!-- En-t√™te de bienvenue -->
    <div class="bg-gradient-to-r from-accent/20 to-accent/10 backdrop-blur-sm rounded-2xl p-6 mb-8 border border-white/20">
        <h1 class="text-title font-title text-textPrimary mb-2">Mes voyages</h1>
    </div>

    <!-- Bouton de proposition -->
    <div class="mb-8">
        {% if app.user.vehicles is empty %}
            <div class="bg-orange-500/20 border border-orange-400/30 rounded-lg p-4">
                <div class="flex items-start gap-3">
                    <svg class="w-5 h-5 text-orange-400 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                    </svg>
                    <div>
                        <p class="text-body text-orange-300">
                            Vous devez <a href="{{ path('app_vehicles') }}" class="text-accent hover:text-accentDark underline">ajouter un v√©hicule</a> pour proposer un voyage.
                        </p>
                    </div>
                </div>
            </div>
        {% else %}
            <button onclick="openAddRideModal()" class="inline-flex items-center bg-accent text-textSecondary hover:text-textPrimary font-base px-6 py-3 rounded-lg hover:bg-accentDark transition-all duration-300 shadow-lg hover:shadow-xl">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                </svg>
                Proposer un voyage
            </button>
        {% endif %}
    </div>

    <!-- Section des prochains voyages -->
    <div class="mb-12">
        <h2 class="text-subtitle font-title text-textPrimary mb-6">Mes prochains voyages</h2>
        
        {% if upcomingRides is empty %}
            <div class="bg-gradient-to-br from-secondary/20 to-background/50 backdrop-blur-sm rounded-2xl p-8 border border-white/20 text-center">
                <div class="max-w-md mx-auto">
                    <h3 class="text-lg font-title text-textSecondary mb-2">Aucun voyage pr√©vu</h3>
                    <p class="text-textSecondary">
                        Vous n'avez pas encore de voyage planifi√© prochainement.
                    </p>
                </div>
            </div>
        {% else %}
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {% for ride in upcomingRides %}
                    <div class="bg-gradient-to-br from-accent/20 to-accent/10 backdrop-blur-sm rounded-2xl p-6 border border-accent/30 hover:border-accent/50 transition-all duration-300">
                        <div class="flex items-start justify-between mb-4">
                            <div class="flex items-center gap-3">
                                <div>
                                    <div class="flex items-center gap-2 mb-1">
                                        <h3 class="text-subtitle font-title text-textPrimary">{{ ride.departure }} ‚Üí {{ ride.arrival }}</h3>
                                        {% if ride.isEcological %}
                                        <span class="bg-green-500/20 text-textSecondary text-xs px-2 py-1 rounded-full font-base border border-green-400/30">
                                            üå± √âCO
                                        </span>
                                        {% endif %}
                                    </div>
                                    <div class="flex items-center gap-4 text-body text-textSecondary">
                                        <span>{{ ride.date|date('d/m/Y') }}</span>
                                        <span>{{ ride.departureTime|date('H:i') }}</span>
                                        {% if ride.driver == app.user %}
                                            <span class="text-accentDark text-xs">en tant que conducteur</span>
                                        {% else %}
                                            <span class="text-accentDark text-xs">en tant que passager</span>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                            {% if ride.driver == app.user %}
                                {% if ride.status == 'actif' %}
                                    <button onclick="confirmCancelRide({{ ride.id }}, '{{ ride.departure }} ‚Üí {{ ride.arrival }} ({{ ride.date|date('d/m/Y') }})')" class="text-red-400 hover:text-red-300 transition-colors duration-300 p-2 rounded-lg hover:bg-red-500/10">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                        </svg>
                                    </button>
                                {% elseif ride.status == 'en_cours' %}
                                    <button onclick="completeRide({{ ride.id }})" class="text-green-400 hover:text-green-300 transition-colors duration-300 p-2 rounded-lg hover:bg-green-500/10">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                        </svg>
                                    </button>
                                {% elseif ride.status == 'termine' %}
                                    <a href="#" class="text-accent hover:text-accentDark transition-colors duration-300 p-2 rounded-lg hover:bg-accent/10">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                                        </svg>
                                    </a>
                                {% endif %}
                            {% elseif ride.status == 'termine' %}
                                <a href="#" class="text-accent hover:text-accentDark transition-colors duration-300 p-2 rounded-lg hover:bg-accent/10">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                                    </svg>
                                </a>
                            {% endif %}
                        </div>
                        
                        <div class="space-y-3">
                            <div class="flex items-center justify-between">
                                <span class="text-body text-textSecondary">Prix par passager</span>
                                <span class="text-body font-base text-textPrimary">{{ ride.price }} cr√©dits</span>
                            </div>
                            {% if ride.driver == app.user %}
                                <div class="flex items-center justify-between">
                                    <span class="text-body text-textSecondary">Places disponibles</span>
                                    <span class="text-body font-base text-textPrimary">{{ ride.availableSeats }} places</span>
                                </div>
                            {% endif %}
                            <div class="flex items-center justify-between">
                                <span class="text-body text-textSecondary">V√©hicule</span>
                                <span class="text-body font-base text-textPrimary">{{ ride.vehicle.brand }} {{ ride.vehicle.model }}</span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-body text-textSecondary">Arriv√©e estim√©e</span>
                                <span class="text-body font-base text-textPrimary">{{ ride.arrivalTime|date('H:i') }}</span>
                            </div>
                            {% if ride.date|date('Y-m-d') == "now"|date('Y-m-d') %}
                                <div class="flex items-center justify-center">
                                    <span class="bg-background/20 text-textPrimary text-xs px-3 py-1 rounded-full font-base border border-textPrimary/30">
                                        Aujourd'hui
                                    </span>
                                </div>
                            {% endif %}
                        </div>
                        
                        <!-- Lien "En savoir plus" -->
                        <div class="mt-4 pt-4 border-t border-accent/30">
                            <button onclick="openRideDetailsModal({{ ride.id }})" class="inline-flex items-center text-accent hover:text-accentDark font-base transition-colors duration-300">
                                En savoir plus
                                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </button>
                        </div>
                        
                        <!-- Demandes de r√©servation (si conducteur) -->
                        {% if ride.driver == app.user %}
                            {% set pendingParticipations = [] %}
                            {% for participation in ride.participations %}
                                {% if participation.status == 'en_attente' %}
                                    {% set pendingParticipations = pendingParticipations|merge([participation]) %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if pendingParticipations|length > 0 %}
                                <div class="mt-4 pt-4 border-t border-accent/30">
                                    <h4 class="text-body font-base text-textPrimary mb-3">
                                        Demandes en attente ({{ pendingParticipations|length }})
                                    </h4>
                                    <div class="space-y-2">
                                        {% for participation in pendingParticipations %}
                                            <div class="bg-white/10 rounded-lg p-3 flex justify-between items-center">
                                                <div class="flex items-center gap-3">
                                                    <svg class="w-5 h-5 text-textSecondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                                    </svg>
                                                    <div class="flex flex-col">
                                                        <span class="text-textPrimary font-base">{{ participation.user.pseudo }}</span>
                                                        <span class="text-xs text-textSecondary">
                                                            {% if participation.seatsCount > 1 %}
                                                                {{ participation.seatsCount }} places demand√©es
                                                            {% else %}
                                                                1 place demand√©e
                                                            {% endif %}
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="flex gap-2">
                                                    <button onclick="handleParticipationRequest({{ participation.id }}, 'accepter')" 
                                                            class="bg-primaryLight/30 hover:bg-primaryLight/40 text-primary px-3 py-1 rounded text-xs transition-all duration-300">
                                                        Accepter
                                                    </button>
                                                    <button onclick="handleParticipationRequest({{ participation.id }}, 'refuser')" 
                                                            class="bg-red-500/20 hover:bg-red-500/30 text-red-400 px-3 py-1 rounded text-xs transition-all duration-300">
                                                        Refuser
                                                    </button>
                                                </div>
                                            </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            {% endif %}
                        {% endif %}
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    </div>

    <!-- Section de l'historique -->
    <div>
        <h2 class="text-subtitle font-title text-textPrimary mb-6">Mon historique de voyages ({{ totalPastRides }})</h2>
        
        {% if pastRides is empty %}
            <div class="bg-gradient-to-br from-secondary/20 to-background/50 backdrop-blur-sm rounded-2xl p-8 border border-white/20 text-center">
                <div class="max-w-md mx-auto">
                    <h3 class="text-lg font-title text-textSecondary mb-2">Aucun voyage pass√©</h3>
                    <p class="text-textSecondary">
                        Votre historique de voyages appara√Ætra ici une fois que vous aurez effectu√© vos premiers trajets.
                    </p>
                </div>
            </div>
        {% else %}
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {% for ride in pastRides %}
                    <div class="bg-gradient-to-br from-backgroundDark to-backgroundLight backdrop-blur-sm rounded-2xl p-6 border border-backgroundDark/30 hover:border-backgroundDark/50 transition-all duration-300">
                        <div class="flex items-start justify-between mb-4">
                            <div class="flex items-center gap-3">
                                <div>
                                    <div class="flex items-center gap-2 mb-1">
                                        <h3 class="text-subtitle font-title text-textPrimary">{{ ride.departure }} ‚Üí {{ ride.arrival }}</h3>
                                        {% if ride.isEcological %}
                                        <span class="bg-green-500/20 text-textSecondary text-xs px-2 py-1 rounded-full font-base border border-green-400/30">
                                            üå± √âCO
                                        </span>
                                        {% endif %}
                                        {% if ride.status == 'annule' %}
                                            <span class="bg-red-500/20 text-red-400 text-xs px-2 py-1 rounded-full font-base border border-red-400/30">
                                                Annul√©
                                            </span>
                                        {% elseif ride.status == 'en_cours' %}
                                            <span class="bg-yellow-500/20 text-yellow-400 text-xs px-2 py-1 rounded-full font-base border border-yellow-400/30">
                                                En cours
                                            </span>
                                        {% elseif ride.status == 'termine' %}
                                            <span class="bg-green-500/20 text-green-400 text-xs px-2 py-1 rounded-full font-base border border-green-400/30">
                                                Termin√©
                                            </span>
                                        {% else %}
                                            <span class="bg-gray-500/20 text-gray-400 text-xs px-2 py-1 rounded-full font-base border border-gray-400/30">
                                                Termin√©
                                            </span>
                                        {% endif %}
                                    </div>
                                    <div class="flex items-center gap-4 text-body text-textSecondary">
                                        <span>{{ ride.date|date('d/m/Y') }}</span>
                                        <span>{{ ride.departureTime|date('H:i') }}</span>
                                        {% if ride.driver == app.user %}
                                            <span class="text-accentDark text-xs">en tant que conducteur</span>
                                        {% else %}
                                            <span class="text-accentDark text-xs">en tant que passager</span>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="space-y-3">
                            <div class="flex items-center justify-between">
                                <span class="text-body text-textSecondary">Prix par passager</span>
                                <span class="text-body font-base text-textPrimary">{{ ride.price }} cr√©dits</span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-body text-textSecondary">V√©hicule</span>
                                <span class="text-body font-base text-textPrimary">{{ ride.vehicle.brand }} {{ ride.vehicle.model }}</span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span class="text-body text-textSecondary">Arriv√©e</span>
                                <span class="text-body font-base text-textPrimary">{{ ride.arrivalTime|date('H:i') }}</span>
                            </div>
                        </div>
                        
                        <!-- Lien "En savoir plus" -->
                        <div class="mt-4 pt-4 border-t border-backgroundDark/30">
                            <button onclick="openRideDetailsModal({{ ride.id }})" class="inline-flex items-center text-accent hover:text-accentDark font-base transition-colors duration-300">
                                En savoir plus
                                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                {% endfor %}
            </div>
            
            <!-- Pagination -->
            {% if totalPages > 1 %}
                <div class="mt-8 flex justify-center">
                    <nav class="flex items-center gap-2">
                        {% if currentPage > 1 %}
                            <a href="{{ path('app_rides_user', {'page': currentPage - 1}) }}" class="inline-flex items-center px-3 py-2 text-sm font-base text-textSecondary bg-background/20 border border-background/30 rounded-lg hover:bg-background/40 transition-colors duration-300">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                </svg>
                                Pr√©c√©dent
                            </a>
                        {% endif %}
                        
                        <div class="flex items-center gap-1">
                            {% for page in 1..totalPages %}
                                {% if page == currentPage %}
                                    <span class="inline-flex items-center px-3 py-2 text-sm font-base text-textPrimary bg-accent/20 border border-accent/30 rounded-lg">
                                        {{ page }}
                                    </span>
                                {% elseif page == 1 or page == totalPages or (page >= currentPage - 2 and page <= currentPage + 2) %}
                                    <a href="{{ path('app_rides_user', {'page': page}) }}" class="inline-flex items-center px-3 py-2 text-sm font-base text-textSecondary bg-background/20 border border-background/30 rounded-lg hover:bg-background/40 transition-colors duration-300">
                                        {{ page }}
                                    </a>
                                {% elseif page == currentPage - 3 or page == currentPage + 3 %}
                                    <span class="inline-flex items-center px-3 py-2 text-sm font-base text-textSecondary">
                                        ...
                                    </span>
                                {% endif %}
                            {% endfor %}
                        </div>
                        
                        {% if currentPage < totalPages %}
                            <a href="{{ path('app_rides_user', {'page': currentPage + 1}) }}" class="inline-flex items-center px-3 py-2 text-sm font-base text-textSecondary bg-background/20 border border-background/30 rounded-lg hover:bg-background/40 transition-colors duration-300">
                                Suivant
                                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </a>
                        {% endif %}
                    </nav>
                </div>
            {% endif %}
        {% endif %}
    </div>
{% endblock %}

{% block vehicle_modals %}
    <!-- Modal d'ajout de voyage -->
    {% if app.user.vehicles is not empty %}
    <div id="addRideModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[60] flex items-center justify-center p-4">
        <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto transform transition-all">
            <div class="text-center mb-6">
                <h3 class="text-subtitle font-title text-backgroundDark mb-2">Proposer un voyage</h3>
                <p class="text-background">Remplissez les informations de votre voyage</p>
            </div>
            
            {{ form_start(form, {'attr': {'id': 'addRideForm', 'class': 'space-y-6'}}) }}
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        {{ form_label(form.departure, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.departure) }}
                        {{ form_errors(form.departure) }}
                    </div>
                    
                    <div>
                        {{ form_label(form.arrival, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.arrival) }}
                        {{ form_errors(form.arrival) }}
                    </div>

                    <div class="relative">
                        {{ form_label(form.date, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        <div class="relative">
                            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                                <svg class="w-4 h-4 text-backgroundDark/60" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                                </svg>
                            </div>
                            <input name="ride[date]" type="text" 
                                id="ride_date"
                                value="{{ form.date.vars.value ? form.date.vars.value|date('d/m/Y') : 'now'|date('d/m/Y') }}"
                                readonly
                                class="w-full px-4 py-2 ps-10 font-body text-secondary rounded-lg bg-white/20 text-backgroundDark placeholder-backgroundDark/60 border-white/30 focus:border-accent cursor-pointer backdrop-blur-sm" 
                                placeholder="S√©lectionner une date">
                        </div>
                        {{ form_errors(form.date) }}
                    </div>
                    
                    <div>
                        {{ form_label(form.departureTime, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.departureTime) }}
                        {{ form_errors(form.departureTime) }}
                    </div>

                    <div>
                        {{ form_label(form.arrivalTime, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.arrivalTime) }}
                        {{ form_errors(form.arrivalTime) }}
                    </div>

                    <div>
                        {{ form_label(form.price, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.price) }}
                        {{ form_errors(form.price) }}
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        {{ form_label(form.availableSeats, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.availableSeats) }}
                        {{ form_errors(form.availableSeats) }}
                        <p class="text-xs text-background/80 mt-1">Nombre de passagers (hors conducteur)</p>
                    </div>

                    <div>
                        {{ form_label(form.vehicle, null, {'label_attr': {'class': 'block text-body font-base text-backgroundDark mb-2'}}) }}
                        {{ form_widget(form.vehicle) }}
                        {{ form_errors(form.vehicle) }}
                    </div>
                </div>

                <!-- Info sur l'utilisation -->
                <div class="bg-accent bg-opacity-20 border border-accent border-opacity-40 rounded-lg p-4">
                    <div class="flex items-start gap-3">
                        <svg class="w-5 h-5 text-backgroundDark mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        <div>
                            <h4 class="font-base text-backgroundDark mb-1">√Ä savoir</h4>
                            <p class="text-body text-background mb-2">
                                ‚Ä¢ Une fois publi√©, les autres utilisateurs pourront r√©server des places<br>
                                ‚Ä¢ Les passagers paient en cr√©dits (la plateforme pr√©l√®ve 2 cr√©dits par transaction)<br>
                            </p>
                        </div>
                    </div>
                </div>

                <div class="flex gap-4 justify-end">
                    <button type="button" onclick="closeAddRideModal()" class="backdrop-blur-sm bg-background/40 border border-background/30 text-textPrimary font-base py-3 px-6 rounded-xl hover:bg-background/60 transition-all duration-300">
                        Annuler
                    </button>
                    {{ form_widget(form.submit) }}
                </div>
                
                <!-- Champ cach√© pour la date du voyage -->
                {{ form_widget(form.date, {'attr': {'style': 'display: none;'}}) }}
            {{ form_end(form) }}
        </div>
    </div>
    
    <!-- Calendrier personnalis√© pour le formulaire de voyage -->
    <div id="ride-date-picker" class="absolute bg-backgroundDark border border-accentDark rounded-lg mt-1 p-4 z-[100] hidden shadow-xl" style="max-height: 400px; overflow-y: auto;">
        <div class="flex items-center justify-between mb-4">
            <button type="button" id="ride-prev-month" class="text-tSecondaryLight hover:text-textPrimary">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
            </button>
            <h3 id="ride-current-month" class="text-textPrimary font-base"></h3>
            <button type="button" id="ride-next-month" class="text-tSecondaryLight hover:text-textPrimary">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
            </button>
        </div>
        <div class="grid grid-cols-7 gap-1 mb-2" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 0.25rem;">
            <div class="text-center text-xs text-tSecondaryLight">Lun</div>
            <div class="text-center text-xs text-tSecondaryLight">Mar</div>
            <div class="text-center text-xs text-tSecondaryLight">Mer</div>
            <div class="text-center text-xs text-tSecondaryLight">Jeu</div>
            <div class="text-center text-xs text-tSecondaryLight">Ven</div>
            <div class="text-center text-xs text-tSecondaryLight">Sam</div>
            <div class="text-center text-xs text-tSecondaryLight">Dim</div>
        </div>
        <div id="ride-calendar-days" class="gap-1" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 0.25rem;"></div>
    </div>
    {% endif %}

    <!-- Modal de confirmation de suppression -->
    <div id="deleteRideModal" class="fixed inset-0 bg-black bg-opacity-50 z-[60] hidden flex items-center justify-center">
        <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-8 max-w-md mx-4 transform transition-all">
            <div class="text-center">
                <h3 class="text-subtitle font-title text-backgroundDark mb-2">Annuler le voyage</h3>
                <p class="text-background mb-6" id="deleteRideText">
                    √ätes-vous s√ªr de vouloir annuler ce voyage ?
                </p>
                <div class="flex gap-4 justify-end">
                    <button id="confirmDeleteRideBtn" class="bg-accent hover:bg-accentDark backdrop-blur-sm hover:backdrop-blur-md text-textSecondary hover:text-textPrimary font-base py-3 px-6 rounded-xl transition-all duration-300">
                        Oui, annuler
                    </button>
                    <button id="cancelDeleteRideBtn" class="backdrop-blur-sm bg-background/40 border border-background/30 text-textPrimary font-base py-3 px-6 rounded-xl hover:bg-background/60 transition-all duration-300">
                        Annuler
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de confirmation pour les demandes de participation -->
    <div id="participationModal" class="fixed inset-0 bg-black bg-opacity-50 z-[60] hidden flex items-center justify-center">
        <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-8 max-w-md mx-4 transform transition-all">
            <div class="text-center">
                <h3 id="participationTitle" class="text-subtitle font-title text-backgroundDark mb-2"></h3>
                <p class="text-background mb-6" id="participationText">
                    <!-- Le texte sera ins√©r√© dynamiquement -->
                </p>
                <div class="flex gap-4 justify-end">
                    <button id="confirmParticipationBtn" class="bg-accent hover:bg-accentDark backdrop-blur-sm hover:backdrop-blur-md text-textSecondary hover:text-textPrimary font-base py-3 px-6 rounded-xl transition-all duration-300">
                        <!-- Le texte sera d√©fini dynamiquement -->
                    </button>
                    <button id="cancelParticipationBtn" class="backdrop-blur-sm bg-background/40 border border-background/30 text-textPrimary font-base py-3 px-6 rounded-xl hover:bg-background/60 transition-all duration-300">
                        Annuler
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let rideToDelete = null;

        function openAddRideModal() {
            document.getElementById('addRideModal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
            
            // Initialiser l'autocompl√©tion des villes maintenant que le modal est visible
            if (typeof initCityAutocomplete !== 'undefined') {
                const departureInput = document.getElementById('ride_departure');
                const arrivalInput = document.getElementById('ride_arrival');
                
                if (departureInput) {
                    initCityAutocomplete(departureInput, 'ride_departure_suggestions');
                }
                
                if (arrivalInput) {
                    initCityAutocomplete(arrivalInput, 'ride_arrival_suggestions');
                }
            }
        }

        function closeAddRideModal() {
            document.getElementById('addRideModal').classList.add('hidden');
            document.body.style.overflow = 'auto';
        }

        function confirmCancelRide(rideId, rideName) {
            rideToDelete = rideId;
            document.getElementById('deleteRideText').textContent = 
                `√ätes-vous s√ªr de vouloir annuler le voyage "${rideName}" ? Les participants seront rembours√©s.`;
            document.getElementById('deleteRideModal').classList.remove('hidden');
        }

        document.getElementById('confirmDeleteRideBtn').addEventListener('click', function() {
            if (rideToDelete) {
                window.location.href = `{{ path('app_rides_cancel', {'id': '__ID__'}) }}`.replace('__ID__', rideToDelete);
            }
        });

        document.getElementById('cancelDeleteRideBtn').addEventListener('click', function() {
            document.getElementById('deleteRideModal').classList.add('hidden');
            rideToDelete = null;
        });

        // Fermer les modals en cliquant en dehors
        {% if app.user.vehicles is not empty %}
        document.getElementById('addRideModal').addEventListener('click', function(event) {
            if (event.target === this) {
                closeAddRideModal();
            }
        });
        {% endif %}

        document.getElementById('deleteRideModal').addEventListener('click', function(event) {
            if (event.target === this) {
                document.getElementById('deleteRideModal').classList.add('hidden');
                rideToDelete = null;
            }
        });

        // Fermer avec la touche Escape
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                {% if app.user.vehicles is not empty %}
                closeAddRideModal();
                {% endif %}
                document.getElementById('deleteRideModal').classList.add('hidden');
                document.getElementById('participationModal').classList.add('hidden');
                rideToDelete = null;
                currentParticipationData = null;
            }
        });

        // Variables globales pour les demandes de participation
        let currentParticipationData = null;

        // Gestion des demandes de participation
        function handleParticipationRequest(participationId, action) {
            // Stocker les donn√©es de la demande
            currentParticipationData = {
                participationId: participationId,
                action: action,
                button: event.target
            };
            
            const actionText = action === 'accepter' ? 'accepter' : 'refuser';
            const isAccept = action === 'accepter';
            
            // Configurer le modal selon l'action
            const title = document.getElementById('participationTitle');
            const text = document.getElementById('participationText');
            const confirmBtn = document.getElementById('confirmParticipationBtn');
            
            if (isAccept) {
                title.textContent = 'Accepter la demande';
                text.textContent = '√ätes-vous s√ªr de vouloir accepter cette demande de covoiturage ?';
                confirmBtn.textContent = 'Oui, accepter';
                confirmBtn.className = 'bg-accent hover:bg-accentDark backdrop-blur-sm hover:backdrop-blur-md text-textSecondary hover:text-textPrimary font-base py-3 px-6 rounded-xl transition-all duration-300';
            } else {
                title.textContent = 'Refuser la demande';
                text.textContent = '√ätes-vous s√ªr de vouloir refuser cette demande ? L\'utilisateur sera rembours√©.';
                confirmBtn.textContent = 'Oui, refuser';
                confirmBtn.className = 'bg-accent hover:bg-accentDark backdrop-blur-sm hover:backdrop-blur-md text-textSecondary hover:text-textPrimary font-base py-3 px-6 rounded-xl transition-all duration-300';
            }
            
            // Afficher le modal
            document.getElementById('participationModal').classList.remove('hidden');
        }

        // Fonction pour confirmer l'action sur la participation
        function confirmParticipationAction() {
            if (!currentParticipationData) return;
            
            const { participationId, action, button } = currentParticipationData;
            const actionText = action === 'accepter' ? 'accepter' : 'refuser';
            
            const originalText = button.textContent;
            button.disabled = true;
            button.textContent = action === 'accepter' ? 'Acceptation...' : 'Refus...';
            
            // Fermer le modal
            document.getElementById('participationModal').classList.add('hidden');
            
            fetch(`/participations/${participationId}/${actionText}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Afficher un message de succ√®s √©l√©gant
                    showSuccessMessage(data.message || `Demande ${action === 'accepter' ? 'accept√©e' : 'refus√©e'} avec succ√®s !`);
                    
                    // Recharger la page apr√®s un d√©lai
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    alert(data.error || `Erreur lors du ${actionText} de la demande`);
                    button.disabled = false;
                    button.textContent = originalText;
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert(`Erreur lors du ${actionText} de la demande`);
                button.disabled = false;
                button.textContent = originalText;
            });
            
            currentParticipationData = null;
        }

        // Fonction pour afficher un message de succ√®s
        function showSuccessMessage(message) {
            const successDiv = document.createElement('div');
            successDiv.className = 'fixed top-4 right-4 z-[80] bg-green-500/20 border border-green-400/30 rounded-lg p-4 backdrop-blur-sm';
            successDiv.innerHTML = `
                <div class="flex items-center gap-3">
                    <svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                    <span class="text-green-300">${message}</span>
                </div>
            `;
            
            document.body.appendChild(successDiv);
            
            // Supprimer le message apr√®s 3 secondes
            setTimeout(() => {
                successDiv.remove();
            }, 3000);
        }

        // Gestionnaires d'√©v√©nements pour le modal de participation
        document.getElementById('confirmParticipationBtn').addEventListener('click', confirmParticipationAction);

        document.getElementById('cancelParticipationBtn').addEventListener('click', function() {
            document.getElementById('participationModal').classList.add('hidden');
            currentParticipationData = null;
        });

        // Fermer le modal en cliquant en dehors
        document.getElementById('participationModal').addEventListener('click', function(event) {
            if (event.target === this) {
                this.classList.add('hidden');
                currentParticipationData = null;
            }
        });

        // Fonction pour terminer un trajet
        function completeRide(rideId) {
            if (confirm('√ätes-vous s√ªr de vouloir terminer ce trajet ?')) {
                fetch(`/ride/${rideId}/complete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Erreur lors de la terminaison du trajet');
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Erreur lors de la terminaison du trajet');
                });
            }
        }

        // Calendrier personnalis√© pour le formulaire de voyage
        class RideDatePicker {
            constructor(inputId, pickerId, daysId, monthId, prevBtnId, nextBtnId) {
                this.input = document.getElementById(inputId);
                this.picker = document.getElementById(pickerId);
                this.daysContainer = document.getElementById(daysId);
                this.monthDisplay = document.getElementById(monthId);
                this.prevBtn = document.getElementById(prevBtnId);
                this.nextBtn = document.getElementById(nextBtnId);
                
                this.currentDate = new Date();
                this.selectedDate = new Date();
                
                this.init();
            }
            
            init() {
                this.renderCalendar();
                this.bindEvents();
            }
            
            renderCalendar() {
                const year = this.currentDate.getFullYear();
                const month = this.currentDate.getMonth();
                
                // Afficher le mois et l'ann√©e
                const monthNames = ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'];
                this.monthDisplay.textContent = `${monthNames[month]} ${year}`;
                
                // Obtenir le premier jour du mois et le nombre de jours
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay() + (firstDay.getDay() === 0 ? -6 : 1));
                
                this.daysContainer.innerHTML = '';
                
                // G√©n√©rer les jours
                for (let i = 0; i < 42; i++) {
                    const date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    
                    const dayElement = document.createElement('div');
                    dayElement.className = 'text-center p-2 cursor-pointer hover:bg-accent/20 rounded';
                    
                    // V√©rifier si c'est le mois actuel
                    if (date.getMonth() === month) {
                        dayElement.classList.add('text-textPrimary');
                        
                        const today = new Date();
                        const isToday = date.toDateString() === today.toDateString();
                        const isSelected = date.toDateString() === this.selectedDate.toDateString();
                        
                        // Logique de coloration prioritaire
                        if (isSelected) {
                            // Date s√©lectionn√©e (priorit√© la plus haute)
                            dayElement.classList.add('bg-accent', 'text-textSecondary');
                        } else if (isToday) {
                            // Aujourd'hui mais non s√©lectionn√©
                            dayElement.style.backgroundColor = '#FFE0B2';
                            dayElement.style.color = '#3E2723';
                        }
                        
                        // V√©rifier si la date est dans le pass√©
                        if (date < new Date().setHours(0, 0, 0, 0)) {
                            dayElement.classList.add('text-tSecondaryLight', 'cursor-not-allowed');
                        } else {
                            dayElement.addEventListener('click', () => this.selectDate(date));
                        }
                    } else {
                        dayElement.classList.add('text-tSecondaryLight');
                    }
                    
                    dayElement.textContent = date.getDate();
                    this.daysContainer.appendChild(dayElement);
                }
            }
            
            selectDate(date) {
                this.selectedDate = date;
                this.input.value = date.toLocaleDateString('fr-FR');
                
                // Cr√©er un champ cach√© avec la date au format Y-m-d pour le formulaire
                let hiddenInput = document.querySelector(`input[name="ride[date]"][type="hidden"]`);
                if (!hiddenInput) {
                    hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'ride[date]';
                    this.input.parentNode.appendChild(hiddenInput);
                }
                hiddenInput.value = date.toISOString().split('T')[0];
                
                this.hidePicker();
                this.renderCalendar();
            }
            
            bindEvents() {
                this.input.addEventListener('click', () => this.togglePicker());
                
                this.prevBtn.addEventListener('click', () => {
                    this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                    this.renderCalendar();
                });
                
                this.nextBtn.addEventListener('click', () => {
                    this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                    this.renderCalendar();
                });
                
                // Fermer le calendrier en cliquant √† l'ext√©rieur
                document.addEventListener('click', (e) => {
                    if (!this.picker.contains(e.target) && !this.input.contains(e.target)) {
                        this.hidePicker();
                    }
                });
            }
            
            togglePicker() {
                if (this.picker.classList.contains('hidden')) {
                    this.showPicker();
                } else {
                    this.hidePicker();
                }
            }
            
            showPicker() {
                this.picker.classList.remove('hidden');
                
                // Positionner le calendrier par rapport au champ de date
                const inputRect = this.input.getBoundingClientRect();
                this.picker.style.position = 'fixed';
                this.picker.style.top = (inputRect.bottom + 4) + 'px';
                this.picker.style.left = inputRect.left + 'px';
                this.picker.style.width = inputRect.width + 'px';
                
                // V√©rifier si le calendrier d√©borde en bas
                setTimeout(() => {
                    const pickerRect = this.picker.getBoundingClientRect();
                    const viewportHeight = window.innerHeight;
                    
                    if (pickerRect.bottom > viewportHeight) {
                        // Le calendrier d√©borde, le positionner au-dessus du champ
                        this.picker.style.top = (inputRect.top - this.picker.offsetHeight - 4) + 'px';
                    }
                }, 10);
            }
            
            hidePicker() {
                this.picker.classList.add('hidden');
                
                // R√©initialiser la position
                this.picker.style.position = '';
                this.picker.style.top = '';
                this.picker.style.left = '';
                this.picker.style.width = '';
            }
        }

        // Initialiser le calendrier du formulaire de voyage
        document.addEventListener('DOMContentLoaded', function() {
            new RideDatePicker('ride_date', 'ride-date-picker', 'ride-calendar-days', 'ride-current-month', 'ride-prev-month', 'ride-next-month');
        });
    </script>
    
    {{ importmap('city-autocomplete') }}
{% endblock %} 