{% extends 'base.html.twig' %}

{% block title %}Covoiturages - Ecoride{% endblock %}

{% block body %}
<div class="min-h-screen pt-20 bg-[url('/images/pexels-lkloeppel-577696.jpg')] bg-cover bg-center bg-no-repeat px-4">
    
    <!-- Hero avec formulaire de recherche -->
    <section class="flex items-start justify-center pt-48 pb-16">
        <div class="text-center px-4">
            <!-- Carte glassmorphique horizontale -->
            <div class="w-full max-w-6xl backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6 mb-4">
                <h1 class="text-2xl font-title text-textPrimary mb-6">Rechercher un covoiturage</h1>
                
                <form method="get" action="{{ path('app_rides') }}" class="flex flex-wrap justify-center gap-2 md:gap-4">
                    <!-- Champs cachés pour les filtres -->
                    <input type="hidden" name="max_price" id="max_price_hidden" value="{{ search.max_price ?? '' }}">
                    <input type="hidden" name="ecological_only" id="ecological_only_hidden" value="{{ search.ecological_only ?? '' }}">
                    <input type="hidden" name="max_duration" id="max_duration_hidden" value="{{ search.max_duration ?? '' }}">
                    <div class="relative max-w-sm">
                        <label for="departure" class="block text-sm font-base text-textPrimary mb-2 text-left">Ville de départ</label>
                        <input
                            type="text"
                            name="departure"
                            id="departure"
                            placeholder="Nantes"
                            value="{{ search.departure ?? '' }}"
                            autocomplete="off"
                            class="w-full px-4 py-2 font-body text-secondary rounded-lg bg-backgroundDark text-textPrimary placeholder-tSecondaryLight border-accentDark focus:border-accentDark"
                        />
                    </div>
                    <div class="relative max-w-sm">
                        <label for="arrival" class="block text-sm font-base text-textPrimary mb-2 text-left">Ville d'arrivée</label>
                        <input
                            type="text"
                            name="arrival"
                            id="arrival"
                            placeholder="Paris"
                            value="{{ search.arrival ?? '' }}"
                            autocomplete="off"
                            class="w-full px-4 py-2 font-body text-secondary rounded-lg bg-backgroundDark text-textPrimary placeholder-tSecondaryLight border-accentDark focus:border-accentDark"
                        />
                    </div>
                    
                    <div class="relative max-w-sm">
                        <label for="date" class="block text-sm font-base text-textPrimary mb-2 text-left">Date de départ</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                                <svg class="w-4 h-4 text-tSecondaryLight" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
                                </svg>
                            </div>
                            <input name="date" type="text" 
                                id="date"
                                value="{{ search.date ?? 'now'|date('d/m/Y') }}"
                                readonly
                                class="w-full px-4 py-2 ps-10 font-body text-secondary rounded-lg bg-backgroundDark text-textPrimary placeholder-tSecondaryLight border-accentDark focus:border-accentDark cursor-pointer" 
                                placeholder="Sélectionner une date">
                        </div>
                    </div>

                    <div class="relative max-w-sm">
                        <label for="quantity-input" class="block text-sm font-base text-textPrimary mb-2 text-left">Nombre de passagers</label>
                        <input
                            type="number"
                            name="passengers"
                            id="quantity-input"
                            placeholder="Ex: 2"
                            value="1"
                            min="1"
                            max="7"
                            class="w-full px-4 py-2 font-body text-secondary rounded-lg bg-backgroundDark text-textPrimary placeholder-tSecondaryLight border-accentDark focus:border-accentDark"
                        />
                    </div>

                    <button type="button" id="filterBtn" class="max-w-sm font-body text-base text-textSecondary hover:text-textPrimary bg-background hover:bg-backgroundDark border border-accent rounded-lg text-body px-4 py-2 transition-all duration-300 flex items-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z"/>
                        </svg>
                        Filtres
                    </button>
                    <button type="submit" class="max-w-sm font-body text-base text-textSecondary hover:text-textPrimary bg-accent hover:bg-accentDark rounded-lg text-body px-4 py-2 transition-all duration-300">
                        Rechercher
                    </button>
                </form>
            </div>
            <!-- Suggestions d'autocomplétion sorties du conteneur glassmorphique -->
            <div id="departure-suggestions" class="absolute bg-backgroundDark border border-accentDark rounded-lg mt-1 max-h-60 overflow-y-auto z-[100] hidden shadow-xl"></div>
            <div id="arrival-suggestions" class="absolute bg-backgroundDark border border-accentDark rounded-lg mt-1 max-h-60 overflow-y-auto z-[100] hidden shadow-xl"></div>
            <!-- Calendrier personnalisé sorti du conteneur glassmorphique -->
            <div id="date-picker" class="absolute bg-backgroundDark border border-accentDark rounded-lg mt-1 p-4 z-[100] hidden shadow-xl" style="max-height: 400px; overflow-y: auto;">
                <div class="flex items-center justify-between mb-4">
                    <button type="button" id="prev-month" class="text-tSecondaryLight hover:text-textPrimary">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                        </svg>
                    </button>
                    <h3 id="current-month" class="text-textPrimary font-base"></h3>
                    <button type="button" id="next-month" class="text-tSecondaryLight hover:text-textPrimary">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                        </svg>
                    </button>
                </div>
                <div class="grid grid-cols-7 gap-1 mb-2" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 0.25rem;">
                    <div class="text-center text-xs text-tSecondaryLight">Lun</div>
                    <div class="text-center text-xs text-tSecondaryLight">Mar</div>
                    <div class="text-center text-xs text-tSecondaryLight">Mer</div>
                    <div class="text-center text-xs text-tSecondaryLight">Jeu</div>
                    <div class="text-center text-xs text-tSecondaryLight">Ven</div>
                    <div class="text-center text-xs text-tSecondaryLight">Sam</div>
                    <div class="text-center text-xs text-tSecondaryLight">Dim</div>
                </div>
                <div id="calendar-days" class="gap-1" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 0.25rem;"></div>
            </div>
        </div>
    </section>

    <!-- Section des résultats -->
    <section class="max-w-6xl mx-auto px-4 pb-20">
        <!-- Résultats de recherche -->
        {% if ridesMatchingSearch is not empty %}
            <div class="mb-12">
                <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6">
                    {% if searchResult.isAlternative %}
                        <div class="bg-accent bg-opacity-20 border border-accent/30 rounded-lg p-4 mb-6">
                            <div class="flex items-start gap-3">
                                <svg class="w-5 h-5 text-accent mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                                <div class="text-left">
                                    <p class="text-accent text-sm">
                                        {% if searchResult.searchedDate %}
                                            Aucun trajet trouvé pour le {{ searchResult.searchedDate|date('d/m/Y') }}.<br>
                                        {% endif %}
                                        <span class="text-xs opacity-80">Voici les trajets disponibles dans les jours suivants :</span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <h2 class="text-xl font-title text-textPrimary mb-6">
                            Trajets alternatifs ({{ ridesMatchingSearch|length }} trajet{{ ridesMatchingSearch|length > 1 ? 's' : '' }})
                        </h2>
                    {% else %}
                        <h2 class="text-xl font-title text-textPrimary mb-6">
                            Résultats de votre recherche ({{ ridesMatchingSearch|length }} trajet{{ ridesMatchingSearch|length > 1 ? 's' : '' }})
                        </h2>
                    {% endif %}
                    
                    <div class="grid gap-4">
                        {% for ride in ridesMatchingSearch %}
                            {% include 'partials/_ride_card.html.twig' %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        {% elseif search.departure or search.arrival or search.date %}
            <div class="mb-12">
                <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6 text-center">
                    <svg class="w-16 h-16 text-textSecondary mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <h2 class="text-xl font-title text-textPrimary mb-2">Aucun trajet trouvé</h2>
                    <p class="text-textSecondary">Aucun covoiturage ne correspond à vos critères de recherche pour cette période.</p>
                    <p class="text-textSecondary text-sm mt-2 opacity-80">Essayez de modifier vos critères ou consultez les prochains covoiturages ci-dessous.</p>
                </div>
            </div>
        {% endif %}
        
        <!-- Trajets à venir (si pas de recherche active) -->
        {% if ridesUpcoming is not empty and not (search.departure or search.arrival or search.date) %}
            <div>
                <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6">
                    <h2 class="text-xl font-title text-textPrimary mb-6">
                        Prochains covoiturages ({{ ridesUpcoming|length }} trajet{{ ridesUpcoming|length > 1 ? 's' : '' }})
                    </h2>
                    
                    <div class="grid gap-4">
                        {% for ride in ridesUpcoming %}
                            {% include 'partials/_ride_card.html.twig' %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        {% endif %}
    </section>

</div>


<div id="reservationModal" class="fixed inset-0 bg-black bg-opacity-50 z-[70] hidden flex items-center justify-center">
    <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-8 max-w-md mx-4 transform transition-all">
        <div class="text-center">
            <div class="mb-4">
                <svg class="w-16 h-16 text-accent mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
            </div>
            <h3 class="text-subtitle font-title text-backgroundDark mb-2">Réserver ce trajet</h3>
            <div id="reservationDetails" class="text-background mb-4">
            </div>
            
            <div class="mb-6">
                <label for="seats" class="block text-backgroundDark font-base mb-2">Nombre de places :</label>
                <select id="seats" class="w-full px-3 py-2 bg-background/60 border border-background/30 rounded-lg text-backgroundDark">
                    <option value="1">1 place</option>
                </select>
            </div>
            <div class="flex gap-4 justify-center">
                <button id="confirmReservationBtn" class="bg-accent hover:bg-accentDark backdrop-blur-sm hover:backdrop-blur-md text-textSecondary font-base py-3 px-6 rounded-xl transition-all duration-300">
                    Confirmer la réservation
                </button>
                <button id="cancelReservationBtn" class="backdrop-blur-sm bg-background/40 border border-background/30 text-textPrimary font-base py-3 px-6 rounded-xl hover:bg-background/60 transition-all duration-300">
                    Annuler
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal des filtres -->
<div id="filterModal" class="fixed inset-0 bg-black bg-opacity-50 z-[70] hidden flex items-center justify-center">
    <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-8 max-w-md mx-4 transform transition-all">
        <div class="w-full">
            <div class="text-center mb-6">
                <div class="mb-4">
                    <svg class="w-16 h-16 text-accent mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z"/>
                    </svg>
                </div>
                <h3 class="text-subtitle font-title text-textPrimary mb-2">Filtres de recherche</h3>
            </div>
            
            <div class="space-y-6">
                <!-- Prix maximum -->
                <div>
                    <label for="filter_max_price" class="block text-textPrimary font-base mb-2">Prix maximum (crédits) :</label>
                    <input type="number" id="filter_max_price" min="0" step="1" 
                           class="backdrop-blur-sm bg-background/40 border border-background/30 text-textSecondary text-body rounded-xl focus:border-accent focus:bg-background/60 block w-full p-3 placeholder-tSecondaryLight"
                           placeholder="Aucune limite">
                </div>
                
                <!-- Label écologique -->
                <div>
                    <label class="flex items-center gap-3">
                        <input type="checkbox" id="filter_ecological" 
                               class="w-4 h-4 text-accent bg-background/40 border-background/30 rounded focus:ring-2">
                        <span class="text-textPrimary font-base">Trajets écologiques uniquement 🌱</span>
                    </label>
                </div>
                
                <!-- Durée maximum -->
                <div>
                    <label for="filter_max_duration" class="block text-textPrimary font-base mb-2">Durée maximum (heures) :</label>
                    <input type="number" id="filter_max_duration" min="0" max="24" step="0.5" 
                           class="backdrop-blur-sm bg-background/40 border border-background/30 text-textSecondary text-body rounded-xl focus:border-accent focus:bg-background/60 block w-full p-3 placeholder-tSecondaryLight"
                           placeholder="Aucune limite (max 24h)">
                </div>
            </div>
            <br>
            <button id="clearFiltersBtn" class=" text-accent hover:text-accentDark font-base  ">
                    Réinitialiser
            </button>
            <div class="flex gap-4 justify-end mt-8">
                <button id="applyFiltersBtn" class="bg-accent hover:bg-accentDark backdrop-blur-sm hover:backdrop-blur-md text-textSecondary font-base py-3 px-6 rounded-xl transition-all duration-300">
                    Appliquer les filtres
                </button>
                <button id="cancelFiltersBtn" class="backdrop-blur-sm bg-background/40 border border-background/30 text-textPrimary font-base py-3 px-6 rounded-xl hover:bg-background/60 transition-all duration-300">
                    Annuler
                </button>
            </div>
        </div>
    </div>
</div>

{{ importmap('city-autocomplete') }}

<script>
var currentRideId = null;

// Initialiser l'autocomplétion quand le DOM est chargé
document.addEventListener('DOMContentLoaded', function() {
    // Initialiser les filtres depuis l'URL au chargement de la page
    initializeFiltersFromURL();
    
    if (typeof CityAutocomplete !== 'undefined') {
        const departureAutocomplete = new CityAutocomplete('departure', 'departure-suggestions');
        const arrivalAutocomplete = new CityAutocomplete('arrival', 'arrival-suggestions');
        
        // Fonction de positionnement pour cette page spécifiquement
        function positionSuggestionsForRidePage() {
            [departureAutocomplete, arrivalAutocomplete].forEach(autocomplete => {
                if (autocomplete.suggestions && !autocomplete.suggestions.classList.contains('hidden')) {
                    const inputRect = autocomplete.input.getBoundingClientRect();
                    autocomplete.suggestions.style.left = inputRect.left + 'px';
                    autocomplete.suggestions.style.top = (inputRect.bottom + window.scrollY) + 'px';
                    autocomplete.suggestions.style.width = inputRect.width + 'px';
                }
            });
        }
        
        // Observer les changements de visibilité des suggestions
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.attributeName === 'class') {
                    const target = mutation.target;
                    if (target.id === 'departure-suggestions' || target.id === 'arrival-suggestions') {
                        if (!target.classList.contains('hidden')) {
                            setTimeout(positionSuggestionsForRidePage, 0);
                        }
                    }
                }
            });
        });
        
        observer.observe(document.getElementById('departure-suggestions'), { attributes: true });
        observer.observe(document.getElementById('arrival-suggestions'), { attributes: true });
    }
});

function initializeFiltersFromURL() {
    // Initialiser les champs cachés avec les valeurs de l'URL dès le chargement
    const urlParams = new URLSearchParams(window.location.search);
    const maxPrice = urlParams.get('max_price');
    const ecologicalOnly = urlParams.get('ecological_only');
    const maxDuration = urlParams.get('max_duration');
    
    if (maxPrice) document.getElementById('max_price_hidden').value = maxPrice;
    if (ecologicalOnly) document.getElementById('ecological_only_hidden').value = ecologicalOnly;
    if (maxDuration) document.getElementById('max_duration_hidden').value = maxDuration;
}

function reserveRide(rideId) {
    currentRideId = rideId;
    var button = event.target;
    var departure = button.getAttribute('data-ride-departure');
    var arrival = button.getAttribute('data-ride-arrival');
    var date = button.getAttribute('data-ride-date');
    var time = button.getAttribute('data-ride-time');
    var availableSeats = parseInt(button.getAttribute('data-ride-available-seats'));
    
    document.getElementById('reservationDetails').innerHTML = 
        '<p><strong>' + departure + ' → ' + arrival + '</strong></p>' +
        '<p>' + date + ' à ' + time + '</p>';
    
    var select = document.getElementById('seats');
    select.innerHTML = '';
    for (var i = 1; i <= Math.min(4, availableSeats); i++) {
        select.innerHTML += '<option value="' + i + '">' + i + ' place' + (i > 1 ? 's' : '') + '</option>';
    }
    
    document.getElementById('reservationModal').classList.remove('hidden');
}

function confirmReservation() {
    var seats = parseInt(document.getElementById('seats').value);
    var btn = document.getElementById('confirmReservationBtn');
    btn.disabled = true;
    btn.textContent = 'Réservation...';
    
    fetch('/trajets/' + currentRideId + '/reserver', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({ seats: seats })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById('reservationModal').classList.add('hidden');
            showSuccessPopup();
            setTimeout(() => location.reload(), 3000);
        } else {
            alert(data.error);
            btn.disabled = false;
            btn.textContent = 'Confirmer la réservation';
        }
    });
}

document.getElementById('confirmReservationBtn').addEventListener('click', confirmReservation);
document.getElementById('cancelReservationBtn').addEventListener('click', function() {
    document.getElementById('reservationModal').classList.add('hidden');
});

// Gestion du modal des filtres
document.getElementById('filterBtn').addEventListener('click', function() {
    // Charger les valeurs existantes dans le modal
    loadFiltersFromForm();
    document.getElementById('filterModal').classList.remove('hidden');
});

document.getElementById('cancelFiltersBtn').addEventListener('click', function() {
    document.getElementById('filterModal').classList.add('hidden');
});

document.getElementById('applyFiltersBtn').addEventListener('click', function() {
    // Appliquer les filtres au formulaire principal
    applyFiltersToForm();
    document.getElementById('filterModal').classList.add('hidden');
    // Soumettre automatiquement le formulaire
    document.querySelector('form').submit();
});

document.getElementById('clearFiltersBtn').addEventListener('click', function() {
    // Effacer tous les filtres
    document.getElementById('filter_max_price').value = '';
    document.getElementById('filter_ecological').checked = false;
    document.getElementById('filter_max_duration').value = '';
    
    // Effacer aussi les champs cachés
    document.getElementById('max_price_hidden').value = '';
    document.getElementById('ecological_only_hidden').value = '';
    document.getElementById('max_duration_hidden').value = '';
    
    // Fermer le modal et soumettre
    document.getElementById('filterModal').classList.add('hidden');
    document.querySelector('form').submit();
});

function loadFiltersFromForm() {
    // Récupérer les valeurs depuis l'URL pour garantir la persistance
    const urlParams = new URLSearchParams(window.location.search);
    const maxPrice = urlParams.get('max_price') || document.getElementById('max_price_hidden').value;
    const ecologicalOnly = urlParams.get('ecological_only') || document.getElementById('ecological_only_hidden').value;
    const maxDuration = urlParams.get('max_duration') || document.getElementById('max_duration_hidden').value;
    
    document.getElementById('filter_max_price').value = maxPrice || '';
    document.getElementById('filter_ecological').checked = ecologicalOnly === '1' || ecologicalOnly === 'true';
    document.getElementById('filter_max_duration').value = maxDuration || '';
    
    // Mettre à jour aussi les champs cachés pour la cohérence
    document.getElementById('max_price_hidden').value = maxPrice || '';
    document.getElementById('ecological_only_hidden').value = ecologicalOnly || '';
    document.getElementById('max_duration_hidden').value = maxDuration || '';
}

function applyFiltersToForm() {
    // Appliquer les valeurs du modal vers les champs cachés
    const maxPrice = document.getElementById('filter_max_price').value;
    const ecologicalOnly = document.getElementById('filter_ecological').checked;
    const maxDuration = document.getElementById('filter_max_duration').value;
    
    document.getElementById('max_price_hidden').value = maxPrice || '';
    document.getElementById('ecological_only_hidden').value = ecologicalOnly ? '1' : '';
    document.getElementById('max_duration_hidden').value = maxDuration || '';
}

function showSuccessPopup() {
    // Créer le pop-up de succès
    const popup = document.createElement('div');
    popup.className = 'success-popup fixed inset-0 bg-black bg-opacity-50 z-[80] flex items-center justify-center';
    popup.innerHTML = `
        <div class="backdrop-blur-xl backdrop-saturate-150 backdrop-contrast-125 bg-white/30 rounded-2xl shadow-2xl border border-white/30 p-6 max-w-md mx-4 transform transition-all">
            <div class="text-center">
                <h3 class="text-subtitle font-title text-backgroundDark mb-2">Demande de réservation envoyée !</h3>
                <p class="text-background text-sm">Le conducteur va examiner votre demande</p>
            </div>
        </div>
    `;
    
    // Ajouter au body
    document.body.appendChild(popup);
    
    // Animation d'apparition
    popup.style.opacity = '0';
    requestAnimationFrame(() => {
        popup.style.transition = 'opacity 0.3s ease-in';
        popup.style.opacity = '1';
    });
    
    // Auto-fermeture après 3 secondes
    setTimeout(() => {
        popup.style.opacity = '0';
        popup.style.transition = 'opacity 0.3s ease-out';
        setTimeout(() => popup.remove(), 300);
    }, 3000);
}

// Calendrier personnalisé
class DatePicker {
    constructor(inputId, pickerId, daysId, monthId, prevBtnId, nextBtnId) {
        this.input = document.getElementById(inputId);
        this.picker = document.getElementById(pickerId);
        this.daysContainer = document.getElementById(daysId);
        this.monthDisplay = document.getElementById(monthId);
        this.prevBtn = document.getElementById(prevBtnId);
        this.nextBtn = document.getElementById(nextBtnId);
        
        this.currentDate = new Date();
        this.selectedDate = new Date();
        
        this.init();
    }
    
    init() {
        this.renderCalendar();
        this.bindEvents();
    }
    
    renderCalendar() {
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();
        
        // Afficher le mois et l'année
        const monthNames = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
        this.monthDisplay.textContent = `${monthNames[month]} ${year}`;
        
        // Obtenir le premier jour du mois et le nombre de jours
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay() + (firstDay.getDay() === 0 ? -6 : 1));
        
        this.daysContainer.innerHTML = '';
        
        // Générer les jours
        for (let i = 0; i < 42; i++) {
            const date = new Date(startDate);
            date.setDate(startDate.getDate() + i);
            
            const dayElement = document.createElement('div');
            dayElement.className = 'text-center p-2 cursor-pointer hover:bg-accent/20 rounded';
            
            // Vérifier si c'est le mois actuel
            if (date.getMonth() === month) {
                dayElement.classList.add('text-textPrimary');
                
                const today = new Date();
                const isToday = date.toDateString() === today.toDateString();
                const isSelected = date.toDateString() === this.selectedDate.toDateString();
                
                // Logique de coloration prioritaire
                if (isSelected) {
                    // Date sélectionnée (priorité la plus haute)
                    dayElement.classList.add('bg-accent', 'text-textSecondary');
                } else if (isToday) {
                    // Aujourd'hui mais non sélectionné
                    dayElement.style.backgroundColor = '#FFE0B2';
                    dayElement.style.color = '#3E2723';
                }
                
                // Vérifier si la date est dans le passé
                if (date < new Date().setHours(0, 0, 0, 0)) {
                    dayElement.classList.add('text-tSecondaryLight', 'cursor-not-allowed');
                } else {
                    dayElement.addEventListener('click', () => this.selectDate(date));
                }
            } else {
                dayElement.classList.add('text-tSecondaryLight');
            }
            
            dayElement.textContent = date.getDate();
            this.daysContainer.appendChild(dayElement);
        }
    }
    
    selectDate(date) {
        this.selectedDate = date;
        this.input.value = date.toLocaleDateString('fr-FR');
        
        // Créer un champ caché avec la date au format Y-m-d pour le formulaire
        let hiddenInput = document.querySelector(`input[name="date"][type="hidden"]`);
        if (!hiddenInput) {
            hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'date';
            this.input.parentNode.appendChild(hiddenInput);
        }
        hiddenInput.value = date.toISOString().split('T')[0];
        
        this.hidePicker();
        this.renderCalendar();
    }
    
    bindEvents() {
        this.input.addEventListener('click', () => this.togglePicker());
        
        this.prevBtn.addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() - 1);
            this.renderCalendar();
        });
        
        this.nextBtn.addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() + 1);
            this.renderCalendar();
        });
        
        // Fermer le calendrier en cliquant à l'extérieur
        document.addEventListener('click', (e) => {
            if (!this.picker.contains(e.target) && !this.input.contains(e.target)) {
                this.hidePicker();
            }
        });
    }
    
    togglePicker() {
        if (this.picker.classList.contains('hidden')) {
            this.showPicker();
        } else {
            this.hidePicker();
        }
    }
    
    showPicker() {
        this.picker.classList.remove('hidden');
        
        // Positionner le calendrier par rapport au champ de date
        const inputRect = this.input.getBoundingClientRect();
        this.picker.style.position = 'fixed';
        this.picker.style.top = (inputRect.bottom + 4) + 'px';
        this.picker.style.left = inputRect.left + 'px';
        this.picker.style.width = inputRect.width + 'px';
        
        // Vérifier si le calendrier déborde en bas
        setTimeout(() => {
            const pickerRect = this.picker.getBoundingClientRect();
            const viewportHeight = window.innerHeight;
            
            if (pickerRect.bottom > viewportHeight) {
                // Le calendrier déborde, le positionner au-dessus du champ
                this.picker.style.top = (inputRect.top - this.picker.offsetHeight - 4) + 'px';
            }
        }, 10);
    }
    
    hidePicker() {
        this.picker.classList.add('hidden');
        
        // Réinitialiser la position
        this.picker.style.position = '';
        this.picker.style.top = '';
        this.picker.style.left = '';
        this.picker.style.width = '';
    }
}

// Initialiser le calendrier
document.addEventListener('DOMContentLoaded', function() {
    new DatePicker('date', 'date-picker', 'calendar-days', 'current-month', 'prev-month', 'next-month');
});
</script>

{% endblock %}